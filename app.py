import streamlit as st
import pandas as pd
import string

# ------------------------
# üìö Datos simulados
# ------------------------
data = {
    "t√©rmino_es": ["concordancia", "frecuencia de tokens", "n-grama", "etiquetado POS", "collocaci√≥n"],
    "t√©rmino_en": ["concordance", "token frequency", "n-gram", "POS tagging", "collocation"],
    "definici√≥n_es": [
        "Lista de ocurrencias de una palabra clave en su contexto inmediato.",
        "N√∫mero de veces que un token aparece en un corpus.",
        "Secuencia contigua de n elementos ling√º√≠sticos.",
        "Asignaci√≥n autom√°tica de categor√≠as gramaticales a palabras.",
        "Combinaci√≥n frecuente de palabras que aparecen juntas m√°s de lo esperado."
    ],
    "definici√≥n_en": [
        "A list of occurrences of a keyword in its immediate context.",
        "The number of times a token appears in a corpus.",
        "A contiguous sequence of n linguistic elements.",
        "Automatic assignment of grammatical categories to words.",
        "A frequent combination of words appearing together more than expected."
    ],
    "categor√≠a": ["b√∫squeda", "estad√≠stica", "frecuencia", "an√°lisis morfosint√°ctico", "combinatoria"],
    "tema": ["corpus", "estad√≠stica", "nlp", "nlp", "corpus"]
}
df = pd.DataFrame(data)

# ------------------------
# üåç Idioma
# ------------------------
idioma = st.radio("Idioma de visualizaci√≥n:", ["Espa√±ol", "Ingl√©s"], horizontal=True)

# ------------------------
# üîç Filtros
# ------------------------
busqueda = st.text_input("Buscar t√©rmino:")
letras = list(string.ascii_uppercase)
letra_sel = st.selectbox("Filtrar por letra inicial:", ["Todas"] + letras)
categor√≠as_disponibles = sorted(df["tema"].unique())
cat_sel = st.multiselect("Filtrar por categor√≠a tem√°tica:", categor√≠as_disponibles)

# ------------------------
# üì¶ Aplicar filtros
# ------------------------
campo_term = "t√©rmino_es" if idioma == "Espa√±ol" else "t√©rmino_en"
campo_def = "definici√≥n_es" if idioma == "Espa√±ol" else "definici√≥n_en"

df_filtrado = df.copy()

if letra_sel != "Todas":
    df_filtrado = df_filtrado[df_filtrado[campo_term].str.upper().str.startswith(letra_sel)]

if busqueda:
    df_filtrado = df_filtrado[df_filtrado[campo_term].str.contains(busqueda, case=False)]

if cat_sel:
    df_filtrado = df_filtrado[df_filtrado["tema"].isin(cat_sel)]

# ------------------------
# üß≠ Navegaci√≥n con query params
# ------------------------
query_params = st.query_params
termino_actual = query_params.get("termino", None)

# ------------------------
# üìò Mostrar entradas o listado de t√©rminos
# ------------------------
if termino_actual:
    # Mostrar entrada terminol√≥gica
    entrada = df[df[campo_term] == termino_actual]
    if not entrada.empty:
        row = entrada.iloc[0]
        st.markdown(f"### üìù Entrada terminol√≥gica: {row[campo_term]}")
        st.markdown(f"**Definici√≥n:** {row[campo_def]}")
        st.markdown(f"**Categor√≠a gramatical:** {row['categor√≠a']}")
        st.markdown(f"**Tema:** {row['tema']}")
        st.markdown("[üîô Volver al glosario](?)")
    else:
        st.error("No se encontr√≥ el t√©rmino.")
else:
    st.success(f"{len(df_filtrado)} t√©rmino(s) encontrado(s). Haz clic en uno para ver su entrada completa.")
    for termino in sorted(df_filtrado[campo_term]):
        st.markdown(f"- [{termino}](?termino={termino})")

# ------------------------
# üìå Pie
# ------------------------
st.markdown("---")
st.markdown("üß† Desarrollado por Isabel Moyano |  Proyecto *en construcci√≥n*")
