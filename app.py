import streamlit as st
import pandas as pd
import string

# ------------------------
# üî¢ Datos simulados
# ------------------------
data = {
    "t√©rmino_es": ["concordancia", "frecuencia de tokens", "n-grama", "etiquetado POS", "collocaci√≥n"],
    "t√©rmino_en": ["concordance", "token frequency", "n-gram", "POS tagging", "collocation"],
    "definici√≥n_es": [
        "Lista de ocurrencias de una palabra clave en su contexto inmediato.",
        "N√∫mero de veces que un token aparece en un corpus.",
        "Secuencia contigua de n elementos ling√º√≠sticos.",
        "Asignaci√≥n autom√°tica de categor√≠as gramaticales a palabras.",
        "Combinaci√≥n frecuente de palabras que aparecen juntas m√°s de lo esperado."
    ],
    "definici√≥n_en": [
        "A list of occurrences of a keyword in its immediate context.",
        "The number of times a token appears in a corpus.",
        "A contiguous sequence of n linguistic elements.",
        "Automatic assignment of grammatical categories to words.",
        "A frequent combination of words appearing together more than expected."
    ],
    "categor√≠a": ["b√∫squeda", "estad√≠stica", "frecuencia", "an√°lisis morfosint√°ctico", "combinatoria"],
    "tema": ["corpus", "estad√≠stica", "nlp", "nlp", "corpus"]  # Categor√≠as tem√°ticas
}

df = pd.DataFrame(data)

# ------------------------
# ‚öôÔ∏è Configuraci√≥n
# ------------------------
st.set_page_config(page_title="Glosario Ling√º√≠stica de Corpus", layout="wide")
st.title("üìò Glosario Biling√ºe de Ling√º√≠stica de Corpus")

# ------------------------
# üåç Idioma
# ------------------------
idioma = st.radio("Selecciona el idioma de visualizaci√≥n:", ["Espa√±ol", "Ingl√©s"], horizontal=True)

# ------------------------
# üîç Filtro 1: b√∫squeda por texto
# ------------------------
busqueda = st.text_input("Buscar t√©rmino:")

# ------------------------
# üî† Filtro 2: letra inicial
# ------------------------
letras = list(string.ascii_uppercase)
letra_sel = st.selectbox("Filtrar por letra inicial del t√©rmino:", ["Todas"] + letras)

# ------------------------
# üìÇ Filtro 3: categor√≠a tem√°tica
# ------------------------
categor√≠as_disponibles = sorted(df["tema"].unique())
cat_sel = st.multiselect("Filtrar por categor√≠a tem√°tica:", categor√≠as_disponibles)

# ------------------------
# üß† Funci√≥n de filtrado
# ------------------------
def filtrar(df, idioma, busqueda, letra, categorias):
    if idioma == "Espa√±ol":
        campo_term = "t√©rmino_es"
        campo_def = "definici√≥n_es"
    else:
        campo_term = "t√©rmino_en"
        campo_def = "definici√≥n_en"

    df_filtrado = df.copy()

    if letra != "Todas":
        df_filtrado = df_filtrado[df_filtrado[campo_term].str.upper().str.startswith(letra)]

    if busqueda:
        df_filtrado = df_filtrado[df_filtrado[campo_term].str.contains(busqueda, case=False)]

    if categorias:
        df_filtrado = df_filtrado[df_filtrado["tema"].isin(categorias)]

    return df_filtrado[[campo_term, campo_def, "categor√≠a", "tema"]].rename(
        columns={campo_term: "T√©rmino", campo_def: "Definici√≥n", "categor√≠a": "Categor√≠a", "tema": "Tema"}
    )

# ------------------------
# üìã Mostrar resultados
# ------------------------
resultado = filtrar(df, idioma, busqueda, letra_sel, cat_sel)

if not resultado.empty:
    st.success(f"{len(resultado)} t√©rmino(s) encontrado(s).")
    st.table(resultado)
else:
    st.warning("No se encontraron resultados con los filtros aplicados.")

# ------------------------
# üìå Pie
# ------------------------
st.markdown("---")
st.markdown("üß† Desarrollado por Isa ¬∑ Ling√º√≠stica computacional ¬∑ Proyecto *Glosario Corpus*")
